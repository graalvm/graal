#!/bin/bash


function usage()
{
        echo "write_gdbsourcepath [-h | -v]"
        echo "writes command to set source path to .gdbsourcepath"
        echo "set GRAAL_SRC_ROOT to graal git repo root"
        echo "   defaults to .. when . = sdk, compile, substratevm, truffle"
        echo "set GRAAL_JDK_SRC_ROOT to unzipped src.zip root"
        echo "   defaults to JAVA_HOME/src"
        exit $1
}

function check_args()
{
    while [ $# -ge 1 ]; do
        if [ "$1" == "-v" ]; then
            VERBOSE=1
            shift
        elif [ "$1" == "-h" ]; then
            usage 0
        else
            usage 1
        fi
   done
}

typeset -i VERBOSE
VERBOSE=0

# debug
function verbose()
{
    if [ $VERBOSE -eq 1 ]; then
        echo $*
    fi
}

# check which java we are using and set up JAVA_VERSION
function check_java_version()
{
    JAVA_VERSION_STRING=$(java -version |& grep version | cut -d' ' -f3)
    if [ "${JAVA_VERSION_STRING#\"1.8.}" != "${JAVA_VERSION_STRING}" ]; then
        JAVA_VERSION=8
    elif [ "${JAVA_VERSION_STRING#\"9.}" != "${JAVA_VERSION_STRING}" ]; then
        JAVA_VERSION=9
    elif [ "${JAVA_VERSION_STRING#\"11.}" != "${JAVA_VERSION_STRING}" ]; then
        JAVA_VERSION=11
    elif [ "${JAVA_VERSION_STRING#\"14.}" != "${JAVA_VERSION_STRING}" ]; then
        JAVA_VERSION=14
    else
        echo "Unrecognized java version : $JAVA_VERSION_STRING"
        exit 1
    fi
}

# check for the required source trees and
# set up GRAAL_SRC_ROOT and GRAAL_JDK_SRC_ROOT
function check_source_dirs()
{
    if [ -z "$GRAAL_SRC_ROOT" ]; then
        # see if we are in one of the Graal trees
        if [ "${PWD#*/sdk}" != "$PWD" -o \
                            "${PWD#*/compiler}" != "$PWD" -o \
                            "${PWD#*/substratevm}" != "$PWD" -o \
                            "${PWD#*/truffle}" != "$PWD" ]; then
            GRAAL_SRC_ROOT=$(cd ..; pwd)
            echo "defaulting GRAAL_SRC_ROOT to .. : $GRAAL_SRC_ROOT"
        else
            echo "Please set GRAAL_SRC_ROOT to git repo checkout dir"
            exit 1
        fi
    fi

    if [ -z "$GRAAL_JDK_SRC_ROOT" ]; then
        if [ ! -z "$JAVA_HOME" ]; then
            GRAAL_JDK_SRC_ROOT=$JAVA_HOME/src
            echo "defaulting GRAAL_JDK_SRC_ROOT to JAVA_HOME : $GRAAL_JDK_SRC_ROOT"
        else
            JAVA_EXE=`which java`
            GRAAL_JDK_SRC_ROOT=${JAVA_EXE%/bin/java}/src
        fi
    fi
}

# add sources from a supplied graal source dir
function add_sources()
{
    # sanity check
    if [ ! -d $1 ]; then
        echo "hmm, was expecting a graal component directory, not this : $1"
    fi
    if [ ! -d $1/src ]; then
        echo "hmm, was expecting to find a graal component source tree, not this : $1/src"
    fi
    root=$1
    for dir in $1/src/*
    do
        typeset -i ignore
        ignore=0
        verbose "considering $dir"
        if [ ! -d ${dir}/src ]; then
            ignore=1
        else
            # look for test or jdk<nn> in the trailing path
            tail=${dir#$root}
            if [ "${tail%*test}" != "$tail" -o \
                                 "${tail#*test}" != "$tail" ] ; then
                # ignore test dirs
                ignore=1
            elif [ "${tail#*jdk}" != "$tail" ]; then
                # check for a specific jdk release
                if [ "${tail#jdk.}" != "$tail" ]; then
                    # jdk. as part of a package name is ok
                    if ["${tail#jdk.}" != "$tail" ]; then
                        echo allow $dir
                    fi
                    ignore=0
                elif [ "${tail#*jdk}" != "${JAVA_VERSION}" ]; then
                    # jdk<nn> must match JAVA_VERSION
                    if [ "${dir#jdk.}" != "$dir" ]; then
                        echo disallow $dir
                    fi
                    ignore=1
                fi
            fi
        fi
        if [ $ignore -eq 1 ] ; then
            verbose "ignoring $dir"
        else
            verbose "including $dir"
            SOURCEPATH=${SOURCEPATH}:$dir/src
        fi
    done
}

# add sources from a supplied java source dir
function add_java_sources()
{
    # sanity check
    if [ ! -d $1 ]; then
        echo "hmm, was expecting to find a JDK source dir, not this : $1"
    fi
    SOURCEPATH=${SOURCEPATH}:$1
}

check_args $*

check_java_version

check_source_dirs

GRAAL_SDK_SRC_ROOT=${GRAAL_SRC_ROOT}/sdk
GRAAL_COMPILER_SRC_ROOT=${GRAAL_SRC_ROOT}/compiler
GRAAL_SUBSTRATEVM_SRC_ROOT=${GRAAL_SRC_ROOT}/substratevm
GRAAL_TRUFFLE_SRC_ROOT=${GRAAL_SRC_ROOT}/truffle

SOURCEPATH=

if [ -d ${GRAAL_SDK_SRC_ROOT} ]; then
    add_sources ${GRAAL_SDK_SRC_ROOT} 
else
    echo "Unable to find sdk sources in ${GRAAL_SDK_SRC_ROOT}"
fi
if [ -d ${GRAAL_COMPILER_SRC_ROOT} ]; then
    add_sources ${GRAAL_COMPILER_SRC_ROOT} 
else
    echo "Unable to find compiler sources in ${GRAAL_COMPILER_SRC_ROOT}"
fi
if [ -d ${GRAAL_SUBSTRATEVM_SRC_ROOT}  ]; then
    add_sources ${GRAAL_SUBSTRATEVM_SRC_ROOT} 
else
    echo "Unable to find substratevm sources in ${GRAAL_SUBSTRATEVM_SRC_ROOT}"
fi
if [ -d ${GRAAL_TRUFFLE_SRC_ROOT} ]; then
    add_sources ${GRAAL_TRUFFLE_SRC_ROOT} 
else
    echo "Unable to find truffle sources in ${GRAAL_TRUFFLE_SRC_ROOT}"
fi

if [ -d ${GRAAL_JDK_SRC_ROOT} ]; then
    add_java_sources ${GRAAL_JDK_SRC_ROOT}
else
    echo "Unable to find JDK sources in ${GRAAL_JDK_SRC_ROOT}/src"
    echo "unzip src.zip into \${GRAAL_JDK_SRC_ROOT}/src"
fi

SOURCEPATH=${SOURCEPATH#:*}
echo "set directories $SOURCEPATH" > .gdbsourcepath
if [ $VERBOSE -gt 0 ]; then
    cat .gdbsourcepath
fi
